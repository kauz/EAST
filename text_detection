#!/usr/bin/env python3

import argparse
import os
import tensorflow as tf
from eval import ImageProcessor


def text_detection_command():
    # construct the argument parser and parse the arguments
    ap = argparse.ArgumentParser()
    ap.add_argument("-i", "--image", type=str,
                    help="path to input image", required=True)
    ap.add_argument("-ckpt", "--checkpoint-path", type=str,
                    default=os.path.join(os.path.dirname(os.path.realpath(__file__)), 'east_icdar2015_resnet_v1_50_rbox'),
                    help="Path to east checkpoint")
    ap.add_argument("-c", "--min-confidence", type=float, default=0.5,
                    help="Minimum probability required to inspect a region. Default: 0.5")
    ap.add_argument("-y", "--padding-vertical", type=float, default=0.0,
                    help="Vertical padding, added to each border of ROI.")
    ap.add_argument("-x", "--padding-horizontal", type=float, default=0.0,
                    help="Horizontal padding, added to each border of ROI.")
    ap.add_argument("-l", "--language", type=str, default='eng',
                    help="Language used by tesseract for text recognition. E.G. deu, eng, deu+eng")
    ap.add_argument("-o", "--oem", type=int, default=1,
                    help="OCR Engine mode used by tesseract. ")
    ap.add_argument("-s", "--psm", type=int, default=7,
                    help="Page segmentation mode used by tesseract.")
    ap.add_argument("-r", "--patterns", type=str,
                    help="Path to the location of user patterns file.")
    ap.add_argument("-v", "--verbose", type=int, default=0)
    ap.add_argument('-g', '--gpu-list', type=str, default='0')
    ap.add_argument("-m", "--preview-mode", type=int, default=0,
                    help="""Preview modes:
                            0 -  Data only;
                            1 -  Show input image with detected polygon drawn;
                            2 -  Show also cropped areas passed to tesseract;
                        """)
    ap.add_argument("-f", "--format", choices=['json', 'csv'], default="json")
    args = vars(ap.parse_args())

    tf.app.flags.DEFINE_string('image', '', '')
    tf.app.flags.DEFINE_string('checkpoint-path', '', '')

    processor = ImageProcessor(args)
    processor.text_detection(args['image'])


if __name__ == '__main__':
    text_detection_command()
